<script setup lang="ts">
import {
  ref, onMounted, onBeforeMount, defineProps, defineEmits, watch, computed,
} from 'vue';
import { useToast } from 'primevue/usetoast';
import { useI18n } from 'vue-i18n';
import Dialog from 'primevue/dialog';
import TabView from 'primevue/tabview';
import TabPanel from 'primevue/tabpanel';
import DataObjectRecordsProvider from '@/dataProviders/dataObjectRecordsProvider';
import DataObjectRecordsDialogViewModel from '@/models/dataObjectRecordsDialogViewModel';
import DataObjectRecordsTable from '@/components/DataObjectRecordsTable.vue';
import ToastHelper from '../../../shared/src/helpers/toastHelper';

// Infrastructure
const { t } = useI18n({ useScope: 'global' });
const provider = new DataObjectRecordsProvider();
const toastHelper = new ToastHelper(useToast());

// Props
const props = defineProps({
  kind: { type: String, required: true },
  name: { type: String, required: true },
  uid: { type: String, required: true },
});

// Data
const title = ref<string>(t('records'));
const model = ref<DataObjectRecordsDialogViewModel>(new DataObjectRecordsDialogViewModel(null));
const activeTabIndex = ref<number>(0);

// Emit
const emit = defineEmits(
  {
    close: () => true,
  },
);

// Methods
async function initAsync(): Promise<void> {
  const response = await provider.getModelAsync(props.kind, props.name, props.uid);

  if (response.isOK) {
    model.value = new DataObjectRecordsDialogViewModel(response.data);
  } else {
    toastHelper.error(response.message);
    console.error(response.presentation);
  }
}

function setTabActive(tabIndex: number): void {
  model.value.tabs.forEach((tab) => {
    tab.isActive = false;
  });

  const activeTab = model.value.tabs[activeTabIndex.value];
  activeTab.isActive = true;
}

// Event handlers
function updateVisible(value: boolean): void {
  if (!value) {
    emit('close');
  }
}

function onTabChange(args: any): void {
  console.log('OnTabChange', args);
}

// Life cycle hooks
onMounted(async () => {
  await initAsync();
});
</script>

<template>
  <Dialog
    modal
    class="pb-0"
    position="top"
    maximizable
    :header="title"
    :visible="true"
    :draggable="false"
    :style="{width: '75%'}"
    @update:visible="updateVisible">
    <div>
      <TabView v-model:activeIndex="activeTabIndex"
               @tabChange="onTabChange">
        <TabPanel v-for="tab in model.tabs"
                  :key="tab.key"
                  :header="tab.title">
          <DataObjectRecordsTable :is-active="tab.isActive"
                                  :kind="kind"
                                  :name="name"
                                  :object-uid="uid"
                                  :register-uid="tab.uid"
                                  :columns="tab.columns"
                                  ></DataObjectRecordsTable>
        </TabPanel>
      </TabView>
    </div>
  </Dialog>
</template>

<style scoped>

</style>
